<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>spring-aop</title>
      <link href="/2023/07/16/spring-aop/"/>
      <url>/2023/07/16/spring-aop/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>本次使用的是spring源码，所以直接引入的是spring-aspects模块</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="keyword">project</span>(<span class="string">&quot;:spring-aspects&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="创建切面类"><a href="#创建切面类" class="headerlink" title="创建切面类"></a>创建切面类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.clean.aspect.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.SourceLocation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutionAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* cn.clean.service..*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(pointcut = &quot;pointCut()&quot;,throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">&quot;AfterThrowing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;pointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object result)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AfterReturning:&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Around after:&quot;</span> + proceed);</span><br><span class="line">         <span class="keyword">return</span> proceed;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;After&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建测试服务类"><a href="#创建测试服务类" class="headerlink" title="创建测试服务类"></a>创建测试服务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.clean.service.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AspectService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">aspect</span><span class="params">(String name, String address)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello aspect&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;args:&quot;</span> + name + <span class="string">&quot; args:&quot;</span> + address);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello aspect&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建测试主类"><a href="#创建测试主类" class="headerlink" title="创建测试主类"></a>创建测试主类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.clean.main.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.clean.config.AppConfig;</span><br><span class="line"><span class="keyword">import</span> cn.clean.service.annotation.ArgsService;</span><br><span class="line"><span class="keyword">import</span> cn.clean.service.annotation.AnnoAspectService;</span><br><span class="line"><span class="keyword">import</span> cn.clean.service.annotation.AspectService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AspectMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">acp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line">         <span class="type">AspectService</span> <span class="variable">bean</span> <span class="operator">=</span> acp.getBean(AspectService.class);</span><br><span class="line">         bean.aspect(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Advice的调用的先后顺序"><a href="#Advice的调用的先后顺序" class="headerlink" title="Advice的调用的先后顺序"></a>Advice的调用的先后顺序</h3><p>Around前置处理   &gt;  Before  &gt;  目标方法  &gt;  AfterReturning  &gt;  After  &gt;  Around后置处理</p><h3 id="切点的定义"><a href="#切点的定义" class="headerlink" title="切点的定义"></a>切点的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 权限修饰符 目标方法</span></span><br><span class="line"><span class="comment">// 第一个*代表任意修饰符</span></span><br><span class="line"><span class="comment">// cn.clean.service..*(..)) 代表cn.clean.service包下的任意方法</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* cn.clean.service..*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配方法中的参数，如果匹配上就触发该切点</span></span><br><span class="line"><span class="comment">// 匹配多个参数时可以@Pointcut(&quot;args(java.lang.String, java.lang.String)&quot;)</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;args(java.lang.String)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">argsPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配指定包下的类的所有方法</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;within(cn.clean.service..*)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配方法上有这个注解的方法</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;@annotation(cn.clean.aspect.annotation.anno.MyAnnotation)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配方法的第一个参数类带这个注解的方法</span></span><br><span class="line"><span class="comment">// 一定是参数类上面带注解，例如一个参数是Address这个类，这个类上必须带这个注解才能命中</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;@args(cn.clean.aspect.annotation.anno.ArgsAnnotation)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">argsPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配目标类上带这个注解的类</span></span><br><span class="line"><span class="comment">// 这个注解必须带@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;@target(cn.clean.aspect.annotation.anno.TargetAnnotation)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">argsPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配目标类上带这个注解的类</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;@within(cn.clean.aspect.annotation.anno.WithAnnotation)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withPointCut1</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java虚拟机</title>
      <link href="/2023/06/24/jvm/"/>
      <url>/2023/06/24/jvm/</url>
      
        <content type="html"><![CDATA[<h2 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h2><p>它是一种能够在不同操作系统上执行Java字节码的虚拟计算机。JVM的主要功能是解释和执行Java字节码，使得Java程序能够在不同的平台上运行。其中以Hotspot使用最为广泛，也是OpenJDK默认的Java虚拟机。</p><p>通过编译器把源文件编译成符合<a href="https://docs.oracle.com/javase/specs/index.html">JVM规范</a>的class文件，就可以通过jvm运行。</p><h3 id="class文件"><a href="#class文件" class="headerlink" title="class文件"></a>class文件</h3><p>class文件是二进制文件，直接用记事本打开会是乱码，使用二进制方式打开如下图所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cafe babe 0000 0034 0038 0a00 0b00 2107</span><br><span class="line">0022 0700 2308 0024 0a00 0300 250a 0002</span><br><span class="line">0026 0a00 0200 2709 0028 0029 0a00 2a00</span><br><span class="line">0016 0019 001a 0002 001b 0000 000a 0002</span><br><span class="line">fd00 1807 001c 0114 001d 0000 0004 0001</span><br><span class="line">001e 0001 001f 0000 0002 0020 </span><br></pre></td></tr></table></figure><p>class文件结构如下图所示</p><table><thead><tr><th>类型</th><th>名称</th><th>解释</th><th>数量</th></tr></thead><tbody><tr><td>u4</td><td>magic</td><td>魔数</td><td>1</td></tr><tr><td>u2</td><td>minor_version</td><td>次版本号</td><td>1</td></tr><tr><td>u2</td><td>major_version</td><td>主版本号</td><td>1</td></tr><tr><td>u2</td><td>constant_pool_count</td><td>常量池个数</td><td>1</td></tr><tr><td>cp_info</td><td>constant_pool[constant_pool_count-1]</td><td>常量池</td><td>constant_pool_count-1</td></tr><tr><td>u2</td><td>access_flags</td><td>访问标记</td><td>1</td></tr><tr><td>u2</td><td>this_class</td><td>类索引</td><td>1</td></tr><tr><td>u2</td><td>super_class</td><td>父亲索引</td><td>1</td></tr><tr><td>u2</td><td>interfaces_count</td><td>接口索引数量</td><td>1</td></tr><tr><td>u2</td><td>interfaces[interfaces_count]</td><td>接口内容</td><td>interfaces_count</td></tr><tr><td>u2</td><td>fields_count</td><td>字段表字段数量</td><td>1</td></tr><tr><td>field_info</td><td>fields[fields_count]</td><td>字段表</td><td>fields_count</td></tr><tr><td>u2</td><td>methods_count</td><td>方法表方法数量</td><td>1</td></tr><tr><td>method_info</td><td>methods[methods_count]</td><td>方法表</td><td>methods_count</td></tr><tr><td>u2</td><td>attributes_count</td><td>属性表属性数量</td><td>1</td></tr><tr><td>attribute_info</td><td>attributes[attributes_count]</td><td>属性表</td><td>attributes_count</td></tr></tbody></table><p>上面u2为2个字节，u4为4个字节，通过上面的class文件结构翻译class文件的二进制内容。</p><h3 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h3><p>java源码被编译成class文件，class文件在jvm中会被抽象成c++的一个oop类</p><table><thead><tr><th>java</th><th>c++</th><th></th></tr></thead><tbody><tr><td>普通对象</td><td>instanceOopDesc</td><td></td></tr><tr><td>普通数组</td><td>typeArrayOopDesc</td><td></td></tr><tr><td>对象数组</td><td>objArrayOopDesc</td><td></td></tr><tr><td>类对象</td><td>instanceKlass</td><td></td></tr><tr><td>普通数组的类</td><td>typeArrayKlass</td><td></td></tr><tr><td>对象数组的类</td><td>objArrayKlass</td><td></td></tr><tr><td>java.lang.ref.Reference及其子类</td><td>instanceRefLKlass</td><td></td></tr><tr><td>Java.lang.ClassLoader</td><td>instanceClassLoaderKlass</td><td></td></tr><tr><td>Java.class.Class</td><td>instanceMirrorKlass</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="JDK源码"><a href="#JDK源码" class="headerlink" title="JDK源码"></a><a href="https://github.com/openjdk/jdk">JDK源码</a></h3><p>文本以jdk11为例，查看jdk11下的虚拟机代码，该代码目录在src&#x2F;hotspot文件下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cpu                   # 与cpu架构相关的代码</span><br><span class="line">os                    # 与操作系统相关的代码</span><br><span class="line">os_cpu            # 与cpu和操作系统相关的代码 </span><br><span class="line">share</span><br><span class="line">adlc              # 平台描述语言编译器（编译cpu目录中的*.ad文件）</span><br><span class="line">aot               # AOT支持，加载验证AOT库等</span><br><span class="line">asm               # 宏汇编器，为宏形式的JIT代码生成机器代码 </span><br><span class="line">cl                # Client即时编译器   </span><br><span class="line">ci                # 编译器接口，定义JIT编译器通用的一些结构</span><br><span class="line">classfile         # 字节码文件解析和处理</span><br><span class="line">code              # 描述JIT编译后的的代码结构等</span><br><span class="line">compiler          # JIT编译器代码，虚拟机通过它选择特定的JIT编译器</span><br><span class="line">gc                # 垃圾回收， gc/shared表示共享代码，gc/gc1，gc/cms表示特定代码</span><br><span class="line">include           # 一些JVM函数和常量的导出</span><br><span class="line">interpreter       # 模版解释器和cpp解释器实现</span><br><span class="line">jfr               # 诊断工具Java Flight Record</span><br><span class="line">jvmci             # JVMCI编译器接口，可以开启Graal编译器代替C2</span><br><span class="line">libadt            # 内部使用的数据结构 </span><br><span class="line">logging           # 日志记录模块</span><br><span class="line">memory            # 内存相关，包括内存划分，metaspace划分等</span><br><span class="line">metaprogramming   # 元编程的一些type_trains</span><br><span class="line">oops              # Java类，对象在jvm的表示</span><br><span class="line">opto              # Server即时编译器（C2。JIT）</span><br><span class="line">precompiled       # 预编译文件</span><br><span class="line">prims             # JNI、JVMTI、Unsafe类具体实现</span><br><span class="line">runtime           # 包罗万象的JVM运行时模块</span><br><span class="line">services          # HeapDump、MXBean、jcmd、jinfo等辅助工具支持</span><br><span class="line">utilties          # 工具组件，如hashtable、JSON解析器、elf格式、快排算法</span><br></pre></td></tr></table></figure><h3 id="JDK源码编译"><a href="#JDK源码编译" class="headerlink" title="JDK源码编译"></a>JDK源码编译</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pgsql</title>
      <link href="/2023/06/23/pgsql/"/>
      <url>/2023/06/23/pgsql/</url>
      
        <content type="html"><![CDATA[<h2 id="PostgresSQL"><a href="#PostgresSQL" class="headerlink" title="PostgresSQL"></a><a href="https://www.postgresql.org/">PostgresSQL</a></h2><h3 id="Cenos7安装pgsql"><a href="#Cenos7安装pgsql" class="headerlink" title="Cenos7安装pgsql"></a><a href="https://www.postgresql.org/download/linux/redhat/">Cenos7安装pgsql</a></h3><ul><li>安装服务器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装服务器</span></span><br><span class="line">yum install postgresql-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化服务器</span></span><br><span class="line">/usr/bin/postgresql-setup initdb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置服务为自启</span></span><br><span class="line">systemctl enable postgresql.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务器</span></span><br><span class="line">systemctl start postgresql.service</span><br></pre></td></tr></table></figure><ul><li>进入服务器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换用户</span></span><br><span class="line">su postgres</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入pgsql</span></span><br><span class="line">psql</span><br></pre></td></tr></table></figure><ul><li>设置远程连接pgsql</li></ul><p>​       修改&#x2F;var&#x2F;lib&#x2F;pgsql&#x2F;data&#x2F;postgresql.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CONNECTIONS AND AUTHENTICATION</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- Connection Settings -</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认是关闭的，需要把能接连的ip和端口号打开</span></span><br><span class="line">listen_addresses = &#x27;*&#x27;                  # what IP address(es) to listen on;</span><br><span class="line">                                        # comma-separated list of addresses;</span><br><span class="line">                                        # defaults to &#x27;localhost&#x27;; use &#x27;*&#x27; for all</span><br><span class="line">                                        # (change requires restart)</span><br><span class="line">port = 5432                             # (change requires restart)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note: In RHEL/Fedora installations, you can<span class="string">&#x27;t set the port number here;</span></span></span><br></pre></td></tr></table></figure><p>​    修改&#x2F;var&#x2F;lib&#x2F;pgsql&#x2F;data&#x2F;pg_hba.conf，在文件中添加如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host    all             all              0.0.0.0/0               md5</span><br></pre></td></tr></table></figure><ul><li>重启pgsql服务器</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dockerfile文件构建</title>
      <link href="/2023/06/17/dockerfile/"/>
      <url>/2023/06/17/dockerfile/</url>
      
        <content type="html"><![CDATA[<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="docker原理"><a href="#docker原理" class="headerlink" title="docker原理"></a>docker原理</h3><h3 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h3><h3 id="Dockerfile文件"><a href="#Dockerfile文件" class="headerlink" title="Dockerfile文件"></a><a href="https://docs.docker.com/engine/reference/builder/">Dockerfile文件</a></h3><p>Dockerfile也可以写成dockerfile，一般写成Dockerfile，用于构建docker镜像</p><h3 id="Dockerfile文件构建"><a href="#Dockerfile文件构建" class="headerlink" title="Dockerfile文件构建"></a>Dockerfile文件构建</h3><p> docker文件中的命令大小写都可以，一般大写</p><p> docker文件的一条命令占一行</p><ul><li>FROM</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建镜像的基础，from必须在其他命令前面</span></span><br><span class="line"><span class="comment"># 可以写多条该命令</span></span><br><span class="line"><span class="keyword">FROM</span> xxx</span><br></pre></td></tr></table></figure><ul><li>RUN</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建镜像运行的命令</span></span><br><span class="line"><span class="comment"># 可以写多条</span></span><br><span class="line"><span class="comment"># 有多种写的格式，例如执行python app.py这个命令，有一下几种方式</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Hello, Docker!&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python app.py</span></span><br></pre></td></tr></table></figure><ul><li>CMD</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在启动命令的时候执行</span></span><br><span class="line"><span class="comment"># 只能有一条，如果有多条，只执行最后一条</span></span><br><span class="line"><span class="comment"># 有多种写的格式，例如执行python app.py这个命令，有一下几种方式</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Hello, Docker!&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> python app.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有 docker run 容器名称 这个种方式才能出发CMD，如果启动名称后面有其他参数就会覆盖掉CMD的默认命令</span></span><br></pre></td></tr></table></figure><ul><li>COPY</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从宿主机复制文件到docker镜像中</span></span><br><span class="line"><span class="comment"># 可以写多条</span></span><br><span class="line"><span class="comment"># 宿主机路径可以写绝对路径，也可以写相对路径，相对路径以dockerfile文件所在路径为基础</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> 宿主机文件路径 镜像文件路径</span></span><br></pre></td></tr></table></figure><ul><li>ADD</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="language-bash"> 宿主机文件路径 镜像文件路径</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> 文件的url地址 镜像文件路径</span></span><br></pre></td></tr></table></figure><ul><li><p>ADD和COPY的区别</p><ul><li><p><code>COPY</code> 命令只能复制主机上的本地文件或目录到镜像中。</p></li><li><p><code>ADD</code> 命令不仅可以复制主机上的本地文件或目录，还可以复制远程文件或 URL 到镜像中。如果目标路径是一个 URL，Docker 将尝试自动下载并复制文件到镜像中。</p></li><li><p><code>COPY</code> 命令在复制过程中不会自动解压缩文件</p></li><li><p><code>ADD</code> 命令在复制过程中如果遇到压缩文件（例如 <code>.tar</code>, <code>.tar.gz</code>, <code>.tgz</code>, <code>.zip</code>），它会自动解压缩文件并将其复制到镜像中</p></li></ul></li><li><p>ENV</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置环境变量，可以通过$变量 获取值</span></span><br><span class="line"><span class="comment"># 可以设置多条</span></span><br><span class="line"><span class="keyword">ENV</span> 变量=赋值</span><br></pre></td></tr></table></figure><ul><li>EXPOSE</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示镜像的端口号信息</span></span><br><span class="line"><span class="comment"># EXPOSR 80 443 3306</span></span><br><span class="line"><span class="comment"># 在创建容器时需要根据-p参数和宿主机绑定</span></span><br><span class="line"><span class="comment"># 并不会真正打开容器的端口，只是提示信息，可以让使用者看到容器的端口情况</span></span><br><span class="line">EXPOSR 端口 端口 端口</span><br></pre></td></tr></table></figure><ul><li>WORKDIR</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置镜像的工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> 目录</span></span><br></pre></td></tr></table></figure><ul><li>VOLUME</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示镜像可挂载点信息</span></span><br><span class="line"><span class="comment"># VOLUME /home/data1 /home/data2s</span></span><br><span class="line"><span class="comment"># 在运行容器时需要和宿主机通过-v参数绑定</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> 路径 路径 路径</span></span><br></pre></td></tr></table></figure><h3 id="Dockerignore文件"><a href="#Dockerignore文件" class="headerlink" title=".Dockerignore文件"></a>.Dockerignore文件</h3><p>该文件用于建立镜像文件时忽略文件，默认和dockerfile文件在同一目录下。gitignore相似，但在语法上有不同的地方。</p><h3 id="dockerignore和gitignore的区别"><a href="#dockerignore和gitignore的区别" class="headerlink" title="dockerignore和gitignore的区别"></a>dockerignore和gitignore的区别</h3><ul><li>dockerignore不会去递归匹配，需要**&#x2F;</li><li>dockerignore匹配文件夹需要后面带 &#x2F;</li></ul><p>应用场景：当我们在copy前端打包的文件到镜像中时，可以设置忽略部分文件不用复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main</span><br><span class="line">    --node_modules</span><br><span class="line">  --public</span><br><span class="line">  --src</span><br><span class="line">  --xxx</span><br><span class="line">  --xxx</span><br><span class="line">  --xxx</span><br><span class="line">  --xxx</span><br><span class="line">  --xxx</span><br><span class="line">Dockerfile</span><br><span class="line">.Dockerignore</span><br></pre></td></tr></table></figure><p>例如我们有以上层级的文件目录，我们需要把main文件夹下除node_modules文件夹的其他文件复制到镜像中，我们可以使用dockerignore文件配置忽略node_modules文件夹。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 配置这一行即可</span><br><span class="line">**/node_modules/</span><br></pre></td></tr></table></figure><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a><a href="https://docs.docker.com/compose/compose-file/">docker-compose</a></h2><h3 id="docker-compose命令"><a href="#docker-compose命令" class="headerlink" title="docker-compose命令"></a><a href="https://docs.docker.com/compose/reference/">docker-compose命令</a></h3><ul><li>build镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包docker-compose的镜像</span></span><br><span class="line">docker-compose build</span><br></pre></td></tr></table></figure><ul><li>启动docker-compose</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-d是后台启动</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><ul><li>停止并删除docker-compose容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><ul><li>停止docker-compose容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure><ul><li>启动docker-compose容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前提是要创建出容器</span></span><br><span class="line">docker-compose start</span><br></pre></td></tr></table></figure><h3 id="docker-compose文件构建"><a href="#docker-compose文件构建" class="headerlink" title="docker-compose文件构建"></a><a href="https://docs.docker.com/engine/reference/commandline/cli/">docker-compose文件构建</a></h3><p>docker-compose需要建立docker-compose.yml或者docker-compose.yaml</p><ul><li>docker-compose.yml</li></ul><p>docker-compose.yml文件命令忽略大小写，但是用大写的就老报错</p><p>docker-compose.yml文件有五大顶级元素</p><ul><li>version</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是docker-compose的版本号</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br></pre></td></tr></table></figure><ul><li>services</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="comment"># 容器名称</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tomcat01</span></span><br><span class="line">    <span class="comment"># 容器使用的镜像</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat:8.0.53</span></span><br><span class="line">    <span class="comment"># 映射的端口</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="comment"># 数据卷映射   宿主机地址:容器地址</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/nginx/html:/usr/share/nginx/html</span></span><br><span class="line">    <span class="comment"># 该容器依赖的其他容器</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tomcat02</span></span><br><span class="line">  <span class="attr">tomcat02:</span></span><br><span class="line">    <span class="comment"># 容器名称</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tomcat02</span></span><br><span class="line">    <span class="comment"># 容器使用的镜像</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat:8.0.53</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><ul><li>networks</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>volumes</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>configs</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>secrets</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>纪锐鑫</title>
      <link href="/2023/06/14/first/"/>
      <url>/2023/06/14/first/</url>
      
        <content type="html"><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建一个博客"><a href="#创建一个博客" class="headerlink" title="创建一个博客"></a>创建一个博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2023/06/13/hello-world/"/>
      <url>/2023/06/13/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
